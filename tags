!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CJSON_CDECL	deps/cJSON.h	/^#define CJSON_CDECL /;"	d
CJSON_CDECL	deps/cJSON.h	/^#define CJSON_CDECL$/;"	d
CJSON_EXPORT_SYMBOLS	deps/cJSON.h	/^#define CJSON_EXPORT_SYMBOLS$/;"	d
CJSON_NESTING_LIMIT	deps/cJSON.h	/^#define CJSON_NESTING_LIMIT /;"	d
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buf, const int len, const cJSON_bool fmt)$/;"	f
CJSON_PUBLIC	deps/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)$/;"	f
CJSON_PUBLIC	deps/cJSON.h	/^#define CJSON_PUBLIC(/;"	d
CJSON_STDCALL	deps/cJSON.h	/^#define CJSON_STDCALL /;"	d
CJSON_STDCALL	deps/cJSON.h	/^#define CJSON_STDCALL$/;"	d
CJSON_VERSION_MAJOR	deps/cJSON.h	/^#define CJSON_VERSION_MAJOR /;"	d
CJSON_VERSION_MINOR	deps/cJSON.h	/^#define CJSON_VERSION_MINOR /;"	d
CJSON_VERSION_PATCH	deps/cJSON.h	/^#define CJSON_VERSION_PATCH /;"	d
DATA_PATH	main.c	/^const char* DATA_PATH = "data\/data.json";$/;"	v
LinkedList_H_	s_linked_list.h	/^#define LinkedList_H_$/;"	d
TEXT_FIELD_MAX_SIZE	s_contact.h	/^#define TEXT_FIELD_MAX_SIZE /;"	d
USER_INPUT_MAX_SIZE	main.c	/^#define USER_INPUT_MAX_SIZE /;"	d	file:
_CRT_SECURE_NO_DEPRECATE	deps/cJSON.c	/^#define _CRT_SECURE_NO_DEPRECATE$/;"	d	file:
__WINDOWS__	deps/cJSON.h	/^#define __WINDOWS__$/;"	d
add_item_to_array	deps/cJSON.c	/^static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)$/;"	f	file:
add_item_to_object	deps/cJSON.c	/^static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)$/;"	f	file:
address	s_contact.h	/^    const char* address[TEXT_FIELD_MAX_SIZE];$/;"	m	struct:__anon6
allocate	deps/cJSON.c	/^    void *(CJSON_CDECL *allocate)(size_t size);$/;"	m	struct:internal_hooks	file:
array	deps/cJSON.h	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);$/;"	v
boolean	deps/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);$/;"	v
buffer	deps/cJSON.c	/^    unsigned char *buffer;$/;"	m	struct:__anon5	file:
buffer_at_offset	deps/cJSON.c	/^#define buffer_at_offset(/;"	d	file:
buffer_skip_whitespace	deps/cJSON.c	/^static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)$/;"	f	file:
c	deps/cJSON.h	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *c);$/;"	v
cJSON	deps/cJSON.h	/^typedef struct cJSON$/;"	s
cJSON	deps/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddArrayToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddBoolToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)$/;"	f
cJSON_AddFalseToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddItemReferenceToArray	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemReferenceToObject	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToArray	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemToObject	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToObjectCS	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddNullToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddNumberToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)$/;"	f
cJSON_AddObjectToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddRawToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)$/;"	f
cJSON_AddStringToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)$/;"	f
cJSON_AddTrueToObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_Array	deps/cJSON.h	/^#define cJSON_Array /;"	d
cJSON_ArrayForEach	deps/cJSON.h	/^#define cJSON_ArrayForEach(/;"	d
cJSON_CreateArray	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)$/;"	f
cJSON_CreateArrayReference	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {$/;"	f
cJSON_CreateBool	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool b)$/;"	f
cJSON_CreateDoubleArray	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)$/;"	f
cJSON_CreateFalse	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)$/;"	f
cJSON_CreateFloatArray	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)$/;"	f
cJSON_CreateIntArray	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)$/;"	f
cJSON_CreateNull	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)$/;"	f
cJSON_CreateNumber	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)$/;"	f
cJSON_CreateObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)$/;"	f
cJSON_CreateObjectReference	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)$/;"	f
cJSON_CreateRaw	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)$/;"	f
cJSON_CreateString	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)$/;"	f
cJSON_CreateStringArray	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char **strings, int count)$/;"	f
cJSON_CreateStringReference	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)$/;"	f
cJSON_CreateTrue	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)$/;"	f
cJSON_Delete	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)$/;"	f
cJSON_DeleteItemFromArray	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DeleteItemFromObject	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DeleteItemFromObjectCaseSensitive	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromArray	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DetachItemFromObject	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromObjectCaseSensitive	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemViaPointer	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)$/;"	f
cJSON_Duplicate	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)$/;"	f
cJSON_False	deps/cJSON.h	/^#define cJSON_False /;"	d
cJSON_GetArrayItem	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)$/;"	f
cJSON_GetArraySize	deps/cJSON.c	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)$/;"	f
cJSON_GetErrorPtr	deps/cJSON.c	/^CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)$/;"	f
cJSON_GetObjectItem	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetObjectItemCaseSensitive	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetStringValue	deps/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {$/;"	f
cJSON_Hooks	deps/cJSON.h	/^typedef struct cJSON_Hooks$/;"	s
cJSON_Hooks	deps/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_Invalid	deps/cJSON.h	/^#define cJSON_Invalid /;"	d
cJSON_IsReference	deps/cJSON.h	/^#define cJSON_IsReference /;"	d
cJSON_Minify	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_Minify(char *json)$/;"	f
cJSON_NULL	deps/cJSON.h	/^#define cJSON_NULL /;"	d
cJSON_New_Item	deps/cJSON.c	/^static cJSON *cJSON_New_Item(const internal_hooks * const hooks)$/;"	f	file:
cJSON_Number	deps/cJSON.h	/^#define cJSON_Number /;"	d
cJSON_Object	deps/cJSON.h	/^#define cJSON_Object /;"	d
cJSON_Parse	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)$/;"	f
cJSON_ParseWithOpts	deps/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_Print	deps/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)$/;"	f
cJSON_PrintBuffered	deps/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)$/;"	f
cJSON_PrintUnformatted	deps/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)$/;"	f
cJSON_Raw	deps/cJSON.h	/^#define cJSON_Raw /;"	d
cJSON_ReplaceItemInArray	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObject	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObjectCaseSensitive	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_SetIntValue	deps/cJSON.h	/^#define cJSON_SetIntValue(/;"	d
cJSON_SetNumberHelper	deps/cJSON.c	/^CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)$/;"	f
cJSON_SetNumberValue	deps/cJSON.h	/^#define cJSON_SetNumberValue(/;"	d
cJSON_String	deps/cJSON.h	/^#define cJSON_String /;"	d
cJSON_StringIsConst	deps/cJSON.h	/^#define cJSON_StringIsConst /;"	d
cJSON_True	deps/cJSON.h	/^#define cJSON_True /;"	d
cJSON_Version	deps/cJSON.c	/^CJSON_PUBLIC(const char*) cJSON_Version(void)$/;"	f
cJSON__h	deps/cJSON.h	/^#define cJSON__h$/;"	d
cJSON_bool	deps/cJSON.h	/^typedef int cJSON_bool;$/;"	t
cJSON_free	deps/cJSON.c	/^CJSON_PUBLIC(void) cJSON_free(void *object)$/;"	f
cJSON_malloc	deps/cJSON.c	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size)$/;"	f
cJSON_strdup	deps/cJSON.c	/^static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)$/;"	f	file:
can_access_at_index	deps/cJSON.c	/^#define can_access_at_index(/;"	d	file:
can_read	deps/cJSON.c	/^#define can_read(/;"	d	file:
cannot_access_at_index	deps/cJSON.c	/^#define cannot_access_at_index(/;"	d	file:
case_insensitive_strcmp	deps/cJSON.c	/^static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)$/;"	f	file:
cast_away_const	deps/cJSON.c	/^static void* cast_away_const(const void* string)$/;"	f	file:
child	deps/cJSON.h	/^    struct cJSON *child;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	deps/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);$/;"	v
child	deps/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);$/;"	v
cjson_min	deps/cJSON.c	/^#define cjson_min(/;"	d	file:
common_h_	common.h	/^#define common_h_$/;"	d
contact_list	main.c	/^s_linked_list* contact_list; $/;"	v
content	deps/cJSON.c	/^    const unsigned char *content;$/;"	m	struct:__anon4	file:
create_contact	s_contact.c	/^s_contact* create_contact(char* name, char* surname, char* address, int phone)$/;"	f
create_linked_list	s_linked_list.c	/^s_linked_list *create_linked_list() {$/;"	f
create_reference	deps/cJSON.c	/^static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)$/;"	f	file:
data	s_node.h	/^typedef struct { void *data; struct s_node *next; } s_node;$/;"	m	struct:__anon2
deallocate	deps/cJSON.c	/^    void (CJSON_CDECL *deallocate)(void *pointer);$/;"	m	struct:internal_hooks	file:
depth	deps/cJSON.c	/^    size_t depth; \/* How deeply nested (in arrays\/objects) is the input at the current offset. *\/$/;"	m	struct:__anon4	file:
depth	deps/cJSON.c	/^    size_t depth; \/* current nesting depth (for formatted printing) *\/$/;"	m	struct:__anon5	file:
destroy	common.c	/^void destroy(void *item)$/;"	f
ensure	deps/cJSON.c	/^static unsigned char* ensure(printbuffer * const p, size_t needed)$/;"	f	file:
error	deps/cJSON.c	/^} error;$/;"	t	typeref:struct:__anon3	file:
false	deps/cJSON.c	/^#define false /;"	d	file:
find_contact_by_name	main.c	/^void find_contact_by_name(s_linked_list* list, char* name)$/;"	f
format	deps/cJSON.c	/^    cJSON_bool format; \/* is this print a formatted print *\/$/;"	m	struct:__anon5	file:
free_fn	deps/cJSON.h	/^      void (CJSON_CDECL *free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
get_array_item	deps/cJSON.c	/^static cJSON* get_array_item(const cJSON *array, size_t index)$/;"	f	file:
get_decimal_point	deps/cJSON.c	/^static unsigned char get_decimal_point(void)$/;"	f	file:
get_list_length	s_linked_list.c	/^int get_list_length(s_linked_list *list) {$/;"	f
get_object_item	deps/cJSON.c	/^static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)$/;"	f	file:
global_error	deps/cJSON.c	/^static error global_error = { NULL, 0 };$/;"	v	file:
global_hooks	deps/cJSON.c	/^static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };$/;"	v	file:
handle_prompt	main.c	/^void handle_prompt(s_linked_list* contact_list){$/;"	f
head	s_linked_list.h	/^typedef struct { s_node *head;  s_node *tail; int length; } s_linked_list;$/;"	m	struct:__anon1
hooks	deps/cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon4	file:
hooks	deps/cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon5	file:
hooks	deps/cJSON.h	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	v
id	s_contact.h	/^	int id;$/;"	m	struct:__anon6
internal_free	deps/cJSON.c	/^#define internal_free /;"	d	file:
internal_free	deps/cJSON.c	/^static void CJSON_CDECL internal_free(void *pointer)$/;"	f	file:
internal_hooks	deps/cJSON.c	/^typedef struct internal_hooks$/;"	s	file:
internal_hooks	deps/cJSON.c	/^} internal_hooks;$/;"	t	typeref:struct:internal_hooks	file:
internal_malloc	deps/cJSON.c	/^#define internal_malloc /;"	d	file:
internal_malloc	deps/cJSON.c	/^static void * CJSON_CDECL internal_malloc(size_t size)$/;"	f	file:
internal_realloc	deps/cJSON.c	/^#define internal_realloc /;"	d	file:
internal_realloc	deps/cJSON.c	/^static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)$/;"	f	file:
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);$/;"	v
item	deps/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);$/;"	v
json	deps/cJSON.c	/^    const unsigned char *json;$/;"	m	struct:__anon3	file:
length	deps/cJSON.c	/^    size_t length;$/;"	m	struct:__anon4	file:
length	deps/cJSON.c	/^    size_t length;$/;"	m	struct:__anon5	file:
length	s_linked_list.h	/^typedef struct { s_node *head;  s_node *tail; int length; } s_linked_list;$/;"	m	struct:__anon1
main	main.c	/^int main()$/;"	f
malloc_fn	deps/cJSON.h	/^      void *(CJSON_CDECL *malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
name	s_contact.h	/^	const char* name[TEXT_FIELD_MAX_SIZE];$/;"	m	struct:__anon6
next	deps/cJSON.h	/^    struct cJSON *next;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	s_node.h	/^typedef struct { void *data; struct s_node *next; } s_node;$/;"	m	struct:__anon2	typeref:struct:__anon2::s_node
noalloc	deps/cJSON.c	/^    cJSON_bool noalloc;$/;"	m	struct:__anon5	file:
offset	deps/cJSON.c	/^    size_t offset;$/;"	m	struct:__anon4	file:
offset	deps/cJSON.c	/^    size_t offset;$/;"	m	struct:__anon5	file:
parse_array	deps/cJSON.c	/^static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_buffer	deps/cJSON.c	/^} parse_buffer;$/;"	t	typeref:struct:__anon4	file:
parse_hex4	deps/cJSON.c	/^static unsigned parse_hex4(const unsigned char * const input)$/;"	f	file:
parse_number	deps/cJSON.c	/^static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_object	deps/cJSON.c	/^static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_string	deps/cJSON.c	/^static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_value	deps/cJSON.c	/^static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
phone	s_contact.h	/^	int phone;$/;"	m	struct:__anon6
populate_list_from_buffer	main.c	/^void populate_list_from_buffer(char* buff)$/;"	f
position	deps/cJSON.c	/^    size_t position;$/;"	m	struct:__anon3	file:
prev	deps/cJSON.h	/^    struct cJSON *prev;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
print	deps/cJSON.c	/^static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)$/;"	f	file:
print_array	deps/cJSON.c	/^static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_list	s_linked_list.c	/^void print_list(s_linked_list *list)$/;"	f
print_number	deps/cJSON.c	/^static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_object	deps/cJSON.c	/^static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_string	deps/cJSON.c	/^static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)$/;"	f	file:
print_string_ptr	deps/cJSON.c	/^static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)$/;"	f	file:
print_value	deps/cJSON.c	/^static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
printbuffer	deps/cJSON.c	/^} printbuffer;$/;"	t	typeref:struct:__anon5	file:
push_to_list	s_linked_list.c	/^void push_to_list(s_linked_list *list, void *data) {$/;"	f
read_storage	main.c	/^char* read_storage(char* path)$/;"	f
reallocate	deps/cJSON.c	/^    void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);$/;"	m	struct:internal_hooks	file:
remove_from_list	s_linked_list.c	/^void remove_from_list(s_linked_list *list, void *data) {$/;"	f
remove_last	s_linked_list.c	/^void remove_last(s_linked_list* list) {$/;"	f
replace_item_in_object	deps/cJSON.c	/^static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)$/;"	f	file:
s_contact	s_contact.h	/^} s_contact;$/;"	t	typeref:struct:__anon6
s_linked_list	s_linked_list.h	/^typedef struct { s_node *head;  s_node *tail; int length; } s_linked_list;$/;"	t	typeref:struct:__anon1
s_node	s_node.h	/^typedef struct { void *data; struct s_node *next; } s_node;$/;"	t	typeref:struct:__anon2
s_node_H_	s_node.h	/^#define s_node_H_$/;"	d
search_contact	main.c	/^void search_contact(char* query)$/;"	f
size	deps/cJSON.h	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size);$/;"	v
skip_utf8_bom	deps/cJSON.c	/^static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)$/;"	f	file:
string	deps/cJSON.h	/^    char *string;$/;"	m	struct:cJSON
suffix_object	deps/cJSON.c	/^static void suffix_object(cJSON *prev, cJSON *item)$/;"	f	file:
surname	s_contact.h	/^	const char* surname[TEXT_FIELD_MAX_SIZE];$/;"	m	struct:__anon6
tail	s_linked_list.h	/^typedef struct { s_node *head;  s_node *tail; int length; } s_linked_list;$/;"	m	struct:__anon1
true	deps/cJSON.c	/^#define true /;"	d	file:
type	deps/cJSON.h	/^    int type;$/;"	m	struct:cJSON
update_offset	deps/cJSON.c	/^static void update_offset(printbuffer * const buffer)$/;"	f	file:
user_input_add_contact	main.c	/^s_contact* user_input_add_contact()$/;"	f
utf16_literal_to_utf8	deps/cJSON.c	/^static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)$/;"	f	file:
valuedouble	deps/cJSON.h	/^    double valuedouble;$/;"	m	struct:cJSON
valueint	deps/cJSON.h	/^    int valueint;$/;"	m	struct:cJSON
valuestring	deps/cJSON.h	/^    char *valuestring;$/;"	m	struct:cJSON
write_data	main.c	/^void write_data(char* path, char* buff)$/;"	f
